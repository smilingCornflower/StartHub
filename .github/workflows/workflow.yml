name: CI/CD

on:
  push:
    branches:
      - master
      - dev

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install uv
          uv sync --dev

      - name: Create .env file
        run: |
          touch .env
          echo "MODE=test" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "LOGURU_LOG_LEVEL=${{ secrets.LOGURU_LOG_LEVEL }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}" >> .env
      - name: Decode JSON secret to file
        run: echo "${{ secrets.STARTHUB_BUCKET_CREDENTIALS }}" | base64 -d > starthub-bucket-credentials.json

      - name: Run mypy
        run: uv run mypy .
        working-directory: starthub

      - name: Run flake8
        run: uv run flake8 .
        working-directory: starthub

      - name: Run isort
        run: uv run isort . --check-only
        working-directory: starthub

      - name: Run black
        run: uv run black . --check
        working-directory: starthub

  tests:
    runs-on: ubuntu-latest
    needs: [ lint ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Dependencies
        run: |
          pip install uv
          uv sync --dev
      - name: Create .env file
        run: |
          touch .env
          echo "MODE=test" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "LOGURU_LOG_LEVEL=CRITICAL" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}" >> .env
      - name: Decode JSON secret to file
        run: echo "${{ secrets.STARTHUB_BUCKET_CREDENTIALS }}" | base64 -d > starthub-bucket-credentials.json

      - name: Run postgresql
        run: docker compose up -d db

      - name: Run tests
        run: uv run manage.py test
        working-directory: starthub

  deploy:
    runs-on: starthub-vps
    needs: [ tests ]
    if: github.ref == 'refs/heads/master' && success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          touch .env
          echo "MODE=prod" >> .env
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "LOGURU_LOG_LEVEL=${{ secrets.LOGURU_LOG_LEVEL }}" >> .env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "GOOGLE_CLOUD_BUCKET_NAME=${{ secrets.GOOGLE_CLOUD_BUCKET_NAME }}" >> .env
      - name: Decode JSON secret to file
        run: echo "${{ secrets.STARTHUB_BUCKET_CREDENTIALS }}" | base64 -d > starthub-bucket-credentials.json

      - name: login to hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove old image (if exists)
        run: docker rmi smilekundev/starthub-api:old || true

      - name: Tag latest as old
        run: docker tag smilekundev/starthub-api:latest smilekundev/starthub-api:old

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: smilekundev/starthub-api:latest

      - name: Run docker-compose up
        run: docker compose up -d
